chisq.test(butsOut$Freq, g, correct=FALSE)
chisq.test(butsOut$Freq, p, correct=FALSE)
chisq.test(butsOut$Freq, a, correct=FALSE)
min(nbTirs)
# Classes pour les buts
breaksButs <- seq(min(buts), max(buts), by=10)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
# Classes pour les buts
breaksButs <- seq(min(buts), max(buts))
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
# Classes pour les buts
breaksButs <- seq(20, 50, by=5)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
# Classes pour les buts
breaksButs <- seq(20, 50, by=3)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
# Classes pour les buts
breaksButs <- seq(20, 50, by=2)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
# Classes pour les buts
breaksButs <- seq(19, 52, by=3)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
# Classes pour les buts
breaksButs <- seq(19, 53, by=3)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
# Classes pour les buts
breaksButs <- seq(20, 53, by=3)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
breaksButs <- seq(min(nbTirs), max(nbTirs), by=10)
# Classes pour les buts
breaksButs <- seq(20, 52, by=3)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
3
3
3
# Classes pour les buts
breaksButs <- seq(20, 53, by=3)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
min(nbTirs)
max(nbTirs)
# Classes pour les buts
breaksButs <- seq(20, 53, by=3)
classeButs <- factor(cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
breaksTirs <- seq(100, 400, by=20)
classeTirs <- factor(cut(buts, breaksButs))
tirsOut <- as.data.frame(table(classeButs))
tirsOut
breaksTirs <- seq(100, 420, by=20)
classeTirs <- factor(cut(buts, breaksButs))
tirsOut <- as.data.frame(table(classeButs))
tirsOut
breaksTirs <- seq(100, 430, by=20)
classeTirs <- factor(cut(buts, breaksButs))
tirsOut <- as.data.frame(table(classeButs))
tirsOut
breaksTirs <- seq(100, 430, by=20)
# Classes pour les buts
breaks <- seq(20, 53, by=3)
classeButs <- factor(cut(buts, breaks))
butsOut <- as.data.frame(table(classeButs))
butsOut
breaksTirs <- seq(100, 430, by=20)
classeTirs <- factor(cut(buts, breaks))
tirsOut <- as.data.frame(table(classeTirs))
tirsOut
breaksTirs <- seq(100, 430, by=20)
classeTirs <- factor(cut(nbTirs, breaks))
tirsOut <- as.data.frame(table(classeTirs))
tirsOut
classeTirs <- factor(cut(nbTirs, breaks))
tirsOut <- as.data.frame(table(classeTirs))
tirsOut
breaksTirs <- seq(100, 430, by=20)
classeTirs <- factor(cut(nbTirs, breaksTirs))
tirsOut <- as.data.frame(table(classeTirs))
tirsOut
breaksTirs <- seq(100, 400, by=20)
classeTirs <- factor(cut(nbTirs, breaksTirs))
tirsOut <- as.data.frame(table(classeTirs))
tirsOut
breaksTirs <- seq(80, 380, by=20)
classeTirs <- factor(cut(nbTirs, breaksTirs))
tirsOut <- as.data.frame(table(classeTirs))
tirsOut
# Tests Khi-deux pour la taille, le poids et l'age
chisq.test(butsOut$Freq, g, correct=FALSE)
breaksTirs <- seq(80, 380, by=25)
classeTirs <- factor(cut(nbTirs, breaksTirs))
tirsOut <- as.data.frame(table(classeTirs))
tirsOut
# Tests Khi-deux pour la taille, le poids et l'age
chisq.test(butsOut$Freq, g, correct=FALSE)
# Classes pour les buts
breaks <- seq(20, 53, by=3)
classeButs <- factor(cut(buts, breaks))
butsOut <- as.data.frame(table(classeButs))
butsOut
breaksTirs <- seq(80, 380, by=25)
classeTirs <- factor(cut(nbTirs, breaksTirs))
tirsOut <- as.data.frame(table(classeTirs))
tirsOut
# Tests Khi-deux pour la taille, le poids et l'age
chisq.test(butsOut$Freq, tirsOut$Freq, correct=FALSE)
chisq.test(butsOut$Freq, tirsOut$Freq, correct=FALSE)
chisq.test(butsOut$Freq, tirsOut$Freq, correct=FALSE)
buts
# Tests Khi-deux pour la taille, le poids et l'age
chisq.test(buts, g, correct=FALSE)
chisq.test(buts, p, correct=FALSE)
chisq.test(buts, a, correct=FALSE)
chisq.test(buts, nbTirs, correct=FALSE)
chisq.test(buts, nbTirs, correct=FALSE)
chisq.test(buts, temps, correct=FALSE)
chisq.test(buts, a, correct=FALSE)
chisq.test(buts, a, correct=FALSE)
# Tests Khi-deux pour la taille, le poids et l'age
chisq.test(buts, g)
# Tests Khi-deux pour la taille, le poids et l'age
chisq.test(buts, g)
chisq.test(buts, p)
chisq.test(buts, a)
chisq.test(buts, nbTirs)
# Tests Khi-deux pour la taille, le poids et l'age
chisq.test(buts, g)
chisq.test(buts, p)
chisq.test(buts, a)
fisher.test(buts, g)
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, a, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, temps, simulate.p.value = TRUE)
fisher.test(buts, temps, simulate.p.value = TRUE)
chisq.test(buts, temps)
fisher.test(buts, temps)
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, a, simulate.p.value = TRUE)
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, a, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, temps, simulate.p.value = TRUE)
# Tests Khi-deux
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, a, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, temps, simulate.p.value = TRUE)
# Tests Khi-deux
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, temps, simulate.p.value = TRUE)
pchisq.test(buts, nbTirs)
# Classes pour les buts wat do
breaksButs <- seq(20, 50, by=5)
classeButs <- (cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
split(donnee, sample(1:100, nrow(df), replace=T))
split(donnee, sample(1:100, nrow(df), replace=T))
split(donnee, sample(1:5, nrow(df), replace=T))
split(donnee, sample(1:100, nrow(donnee), replace=T))
split(donnee, sample(1:5, nrow(donnee), replace=T))
test <- split(donnee, sample(1:5, nrow(donnee), replace=T))
test
test$`1`
# Classes pour les buts wat do
breaksButs <- seq(20, 50, by=5)
test <- split(donnee, sample(1:5, nrow(donnee), replace=T))
test$`1`
temps = donnee$Temps.sur.la.glace
temps
# Tests Khi-deux
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, a, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsDeGlace, simulate.p.value = TRUE)
tempsDeGlace = donnee$Temps.sur.la.glace
fisher.test(buts, tempsDeGlace, simulate.p.value = TRUE)
tempsDeGlace
tempsPartie = donnee$Temps.Partie.jouÃ©es
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
# Tests Khi-deux
chisq.test(buts, g, simulate.p.value = TRUE)
chisq.test(buts, p, simulate.p.value = TRUE)
chisq.test(buts, a, simulate.p.value = TRUE)
chisq.test(buts, a, simulate.p.value = TRUE)
chisq.test(buts, a, simulate.p.value = TRUE)
chisq.test(buts, a, simulate.p.value = TRUE)
chisq.test(buts, a, simulate.p.value = TRUE)
chisq.test(buts, nbTirs,simulate.p.value = TRUE)
chisq.test(buts, temps, simulate.p.value = TRUE)
# Tests Fisher
fisher.test(buts, g, simulate.p.value = TRUE)
# Tests Fisher
fisher.test(buts, g, simulate.p.value = TRUE)
# Tests Fisher
fisher.test(buts, g, simulate.p.value = TRUE)
# Tests Fisher
fisher.test(buts, g, simulate.p.value = TRUE)
# Tests Fisher
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, a, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
# Classes pour les buts
breaksButs <- seq(20, 50, by=5)
classeButs <- (cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
# Classes pour les buts
breaksButs <- seq(20, 50, by=3)
classeButs <- (cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
breaksTirs <- seq(100, 400, by=25)
classeTirs <- (cut(nbTirs, breaksTirs))
nbTirsOut <- as.data.frame(table(classeTirs))
nbTirsOut
breaksTirs <- seq(100, 400, by=30)
classeTirs <- (cut(nbTirs, breaksTirs))
nbTirsOut <- as.data.frame(table(classeTirs))
nbTirsOut
buts
chisq.test(butsOut, nbTirsOut)
chisq.test(butsOut$Freq, nbTirsOut$Freq)
chisq.test(buts, nbTirs)
source('C:/Users/Jeff/Desktop/MTH2302D - Prob et Stats/AnalyseHockey/analyse.r', encoding = 'UTF-8')
chisq.test(buts, g)
chisq.test(buts, nbTirs)
# Tests Khi-deux
# ===================================================================
# Classes pour les buts
breaksButs <- seq(20, 50, by=3)
classeButs <- (cut(buts, breaksButs))
butsOut <- as.data.frame(table(classeButs))
butsOut
table(classeButs)
table(classeButs, classeTirs)
breaksTirs <- seq(100, 400, by=50)
classeTirs <- (cut(nbTirs, breaksTirs))
nbTirsOut <- as.data.frame(table(classeTirs))
nbTirsOut
table(classeButs, classeTirs)
breaksTirs <- seq(100, 400, by=100)
classeTirs <- (cut(nbTirs, breaksTirs))
nbTirsOut <- as.data.frame(table(classeTirs))
nbTirsOut
table(classeButs, classeTirs)
chisq.test(classeButs, classeTirs)
breaksTirs <- seq(100, 400, by=50)
classeTirs <- (cut(nbTirs, breaksTirs))
nbTirsOut <- as.data.frame(table(classeTirs))
nbTirsOut
table(classeButs, classeTirs)
chisq.test(classeButs, classeTirs)
breaksTirs <- seq(100, 400, by=10)
classeTirs <- (cut(nbTirs, breaksTirs))
nbTirsOut <- as.data.frame(table(classeTirs))
nbTirsOut
table(classeButs, classeTirs)
chisq.test(classeButs, classeTirs)
table(classeButs, classeTirs)
chisq.test(buts, g)
chisq.test(buts, p)
chisq.test(buts, a)
# Tests Fisher
# ===================================================================
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, a, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
# Tests Khi-deux
# ===================================================================
dat <- data.frame(buts = 20:50, value = runif(100))
# Tests Khi-deux
# ===================================================================
dat <- data.frame(Nombre.de.buts = 20:50, value = runif(100))
# Tests Khi-deux
# ===================================================================
dat <- data.frame(Nombre.de.buts = 20:50, value = runif(10))
# Tests Khi-deux
# ===================================================================
dat <- data.frame(Nombre.de.buts = 20:50)
dat <- transform(dat, bin = cut(Nombre.de.buts, 10))
dat
# Tests Khi-deux
# ===================================================================
dt <- data.frame(age=rchisq(20,10),group=sample(1:2,20,rep=T))
ddply(dt,~group,summarise,mean=mean(age),sd=sd(age))
# Tests Khi-deux
# ===================================================================
dt <- data.frame(buts=rchisq(20,10),group=sample(1:2,20,rep=T))
ddply(dt,~group,summarise,mean=mean(buts),sd=sd(buts))
# Tests Khi-deux
# ===================================================================
library(plyr)
install.packages("plyr")
# Tests Khi-deux
# ===================================================================
library(plyr)
dt <- data.frame(buts=rchisq(20,10),group=sample(1:2,20,rep=T))
ddply(dt,~group,summarise,mean=mean(buts),sd=sd(buts))
dt
dt <- data.frame(buts=rchisq(20,10),group=sample(1:100,20,rep=T))
dt
dt <- data.frame(buts=rchisq(20,10),group=sample(1:100,20,rep=T))
dt
sample(1:100,20,rep=T)
DT %>%
group_by(gr=cut(B, breaks= seq(0, 1, by = 5)) ) %>%
summarise(n= n()) %>%
arrange(as.numeric(gr))
install.packages("dplyr")
# Tests Khi-deux
# ===================================================================
library(dplyr)
DT %>%
group_by(gr=cut(B, breaks= seq(0, 1, by = 5)) ) %>%
summarise(n= n()) %>%
arrange(as.numeric(gr))
DT
# Tests Khi-deux
# ===================================================================
dat <- data.frame(year = 1901:2000, value = runif(100))
dat <- transform(dat, bin = cut(year, 10))
dat
dat
# Tests Khi-deux
# ===================================================================
dat <- data.frame(year = 1901:2000, value = runif(100))
dat <- transform(dat, bin = cut(year, 10))
dat
# Tests Khi-deux
# ===================================================================
dat <- data.frame(year = 1901:2000, value = runif(100))
dat <- transform(dat, bin = cut(year, 10))
dat
# Tests Khi-deux
# ===================================================================
dat <- data.frame(year, 10 = 20:50, value = runif(100))
dat <- transform(dat, bin = cut(year, 10))
# Tests Khi-deux
# ===================================================================
dat <- data.frame(year = 20:50, value = runif(100))
dat <- transform(dat, bin = cut(year, 10))
# Tests Khi-deux
# ===================================================================
hflights_df <- tbl_df(donnee)
class(hflights_df)
hflights_df
# Tests Khi-deux
# ===================================================================
table(cut2(buts, m=50))      # group x into intevals with at least 50 obs.
# Tests Khi-deux
# ===================================================================
table(cut(buts, m=50))      # group x into intevals with at least 50 obs.
install.packages("Hmisc")
# Tests Khi-deux
# ===================================================================
table(cut2(buts, m=50))      # group x into intevals with at least 50 obs.
# Tests Fisher
# ===================================================================
library(Hmisc)
# Tests Khi-deux
# ===================================================================
table(cut2(buts, m=50))      # group x into intevals with at least 50 obs.
# Tests Khi-deux
# ===================================================================
table(cut2(buts, m=5))      # group x into intevals with at least 50 obs.
# Tests Khi-deux
# ===================================================================
table(cut2(buts, cuts=10))      # group x into intevals with at least 50 obs.
# Tests Khi-deux
# ===================================================================
table(cut2(buts, cuts=10))      # group x into intevals with at least 50 obs.
# Tests Khi-deux
# ===================================================================
table(cut2(buts, cuts=10))      # group x into intevals with at least 50 obs.
# Tests Khi-deux
# ===================================================================
table(cut2(buts, g=10))
# Tests Khi-deux
# ===================================================================
table(cut2(buts))
# Tests Khi-deux
# ===================================================================
table(cut2(buts, x=10))
# Tests Khi-deux
# ===================================================================
table(cut2(buts, m=10))
# Tests Khi-deux
# ===================================================================
split(buts, cut(buts, quantile(buts, probs = seq(0, 100, by = 5))))
# Tests Khi-deux
# ===================================================================
split(buts, cut(buts, quantile(buts, probs = seq(0, 1, by = 5))))
# Tests Khi-deux
# ===================================================================
mydata <- data.frame(
id = 1:100,
name = paste0("a",1:100),
marks = sample(20:100,100,TRUE),
gender = sample(c("female","male"),100,TRUE))
mydata
# Tests Khi-deux
# ===================================================================
mydata <- data.frame(
id = 1:100,
name = paste0("a",1:100),
marks = sample(20:100,100,TRUE),
gender = sample(c("female","male"),100,TRUE))
mydata
# Tests Khi-deux
# ===================================================================
mydata <- data.frame(
id = 1:100,
name = paste0("a",1:100),
marks = sample(20:100,100,TRUE),
gender = sample(c("female","male"),100,TRUE))
mydata
split(mydata,cut(mydata$marks,seq(20,100,by=10)))
split(donnee,cut(donnee$Nombre.de.buts,seq(20,100,by=10)))
split(donnee,cut(donnee$Nombre.de.buts,seq(20,50,by=10)))
# Tests Khi-deux
# ===================================================================
donneeSplit <- split(donnee,cut(donnee$Nombre.de.buts,seq(20,50,by=10)))
donneeSplit
donneeSplit
mean(donneeSplit)
# Tests Khi-deux
# ===================================================================
donneeSplit <- split(donnee,cut(donnee$Nombre.de.buts,seq(20,50,by=5)))
donneeSplit
mean(donneeSplit$`(20,25]`)
mean(donneeSplit$`(20,25]`)
# Tests Khi-deux
# ===================================================================
donneeSplit <- split(donnee,cut(buts,seq(20,50,by=5)))
donneeSplit
# Tests Khi-deux
# ===================================================================
donneeSplit <- split(donnee,cut(buts,seq(20,50,by=5)))
donneeSplit
library(readr)
basicTrendline
donnee <- read.csv("donnee.csv", header = TRUE, sep = ",", dec = ".")
g = donnee$Grandeur
p = donnee$Poids
a = donnee$Ãge
nbTirs = donnee$Nombre.de.tirs
temps = donnee$Temps.sur.la.glace
tempsPartie = donnee$Temps.Partie.jouÃ©es
buts = donnee$Nombre.de.buts
library(Hmisc)
fisher.test(buts, g, simulate.p.value = TRUE)
fisher.test(buts, p, simulate.p.value = TRUE)
fisher.test(buts, a, simulate.p.value = TRUE)
fisher.test(buts, nbTirs, simulate.p.value = TRUE)
fisher.test(buts, tempsPartie, simulate.p.value = TRUE)
# Importer les donnees.
library(curl)
distribution_moyenne=read.csv2("distribution_moyenne.csv")
X <- as.matrix(distribution_moyenne)
# Importer les donnees.
library(curl)
install.packages("curl")
# Importer les donnees.
library(curl)
distribution_moyenne=read.csv2("distribution_moyenne.csv")
distribution_moyenne=read.csv2("distribution_moyenne.csv")
